import { type IDisposable, type languages, type MonacoEditor } from 'monaco-types'
import { type Config } from 'tailwindcss'
import { PluginAPI } from 'tailwindcss/types/config.js'

/**
 * A Tailwind configuration, where all properties are optional.
 */
export type TailwindConfig = Partial<Config>

/**
 * An object of the arguments for the Tailwind's built-in Plugin API.
 */
export type TailwindPluginAPI = Partial<{
  [T in keyof PluginAPI]: Parameters<PluginAPI[T]>
}>

type DiagnosticSeveritySetting = 'ignore' | 'warning' | 'error'

export interface MonacoTailwindcssOptions {
  /**
   * @default defaultLanguageSelector
   */
  languageSelector?: languages.LanguageSelector

  /**
   * The tailwind configuration to use.
   *
   * This may be either the Tailwind configuration object, or a string that gets processed in the
   * worker.
   */
  tailwindConfig?: TailwindConfig | string
  /**
   * Extend Intellisense's settings.
   * 
   * Default values are based on the VS Code extension.
   * 
   * ``` typescript
   * const defaultSettings = {
      editor: {tabSize: 2},
      tailwindCSS: {
        emmetCompletions: false,
        classAttributes: ["class", "className", "ngClass"],
        codeActions: true,
        hovers: true,
        suggestions: true,
        validate: true,
        colorDecorators: true,
        rootFontSize: 16,
        showPixelEquivalents: true,
        includeLanguages: {},
        files: {exclude: []},
        experimental: {
          classRegex: [],
          configFile: {}
        },
        lint: {
          cssConflict: "warning",
          invalidApply: "error",
          invalidScreen: "error",
          invalidVariant: "error",
          invalidConfigPath: "error",
          invalidTailwindDirective: "error",
          recommendedVariantOrder: "warning"
        },
      }
    }
   */
  intellisense?: Partial<{
    editor: {
      tabSize: number
    }
    tailwindCSS: Partial<{
      emmetCompletions: boolean
      includeLanguages: Record<string, string>
      classAttributes: string[]
      suggestions: boolean
      hovers: boolean
      codeActions: boolean
      validate: boolean
      showPixelEquivalents: boolean
      rootFontSize: number
      colorDecorators: boolean
      files: { exclude: string[] }
      experimental: {
        classRegex: string[]
        configFile: string | Record<string, string | string[]>
      }
      lint: {
        cssConflict: DiagnosticSeveritySetting
        invalidApply: DiagnosticSeveritySetting
        invalidScreen: DiagnosticSeveritySetting
        invalidVariant: DiagnosticSeveritySetting
        invalidConfigPath: DiagnosticSeveritySetting
        invalidTailwindDirective: DiagnosticSeveritySetting
        recommendedVariantOrder: DiagnosticSeveritySetting
      }
    }>
  }>
  /**
 * A way to call Tailwind's built-in Plugin API within the worker.
 * ``` typescript
 * 
   // Instead of calling the functions like this...
 * const tailwindConfig = {
   // ...config
 *  plugins: [
      ({addUtilities}) => {
        addUtilities({
          '.custom-class': {
            color: '#000000',
            'font-size': '1rem',
            'font-weight': 900
          }
        })
      }
    ]
 * }

// ...you provide an array of the parameters for each function you want to call.
// Note that the arguments you pass must be serializable,
// e.g they can't include functions.

 * const tailwindConfig = {
   // ...config
 *  pluginAPI: {
 *    addUtilities: [
 *      {
 *        '.custom-class': {
 *          color: '#000000',
 *          'font-size': '1rem',
 *          'font-weight': 900
 *        }
 *      }
 *    ]
 *  }
 * }
 * ```
 */
  pluginAPI?: TailwindPluginAPI
}

/**
 * Contains the content of CSS classes to extract.
 * With optional "extension" key, which might be relevant
 * to properly extract css classed based on the content language.
 */
export interface Content {
  content: string
  extension?: string
}

export interface MonacoTailwindcss extends IDisposable {
  /**
   * Update the current Tailwind configuration.
   *
   * @param tailwindConfig
   *   The new Tailwind configuration.
   */
  setTailwindConfig: (tailwindConfig: TailwindConfig | string) => void

  /**
   * Generate styles using Tailwindcss.
   *
   * This generates CSS using the Tailwind JIT compiler. It uses the Tailwind configuration that has
   * previously been passed to {@link configureMonacoTailwindcss}.
   *
   * @param css
   *   The CSS to process. Only one CSS file can be processed at a time.
   * @param content
   *   All content that contains CSS classes to extract.
   * @returns
   *   The CSS generated by the Tailwind JIT compiler. It has been optimized for the given  content.
   * @example
   * monacoTailwindcss.generateStylesFromContent(
   *   css,
   *   editor.getModels().filter((model) => model.getLanguageId() === 'html')
   * )
   */
  generateStylesFromContent: (css: string, content: (Content | string)[]) => Promise<string>
}

/**
 * Configure `monaco-tailwindcss`.
 *
 * @param monaco
 *   The `monaco-editor` module.
 * @param options
 *   Options for customizing the `monaco-tailwindcss`.
 */
export function configureMonacoTailwindcss(
  monaco: MonacoEditor,
  options?: MonacoTailwindcssOptions
): MonacoTailwindcss

/**
 * This data can be used with the default Monaco CSS support to support tailwind directives.
 *
 * It will provider hover information from the Tailwindcss documentation, including a link.
 */
export const tailwindcssData: languages.css.CSSDataV1
